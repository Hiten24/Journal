plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'io.realm.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    namespace 'com.hcapps.journal'
    compileSdk ProjectConfig.compileSdk

    defaultConfig {
        applicationId "com.hcapps.journal"
        minSdk ProjectConfig.minSdk
        targetSdk ProjectConfig.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                    "room.schemaLocation":"$projectDir/schemas".toString(),
                    "room.incremental":"true"
                ]
            }
        }

    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    kotlin {
        jvmToolchain(8)
    }

    splits {
        abi {
            // enable APK splitting wrt architecture
            enable true
            // reset the architecture for which you need to build the APKs for
            reset()
            // include the architectures for which is building APK
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            // set this to false if you don't want an APK that has native code for all architectures
            universalApk false
        }
    }

    project.ext.versionCodes = ['x86': 0, 'x86_64': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3]

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1 + android.defaultConfig.versionCode
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
    }
    composeOptions {
        kotlinCompilerExtensionVersion ProjectConfig.extensionVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation libs.activity.compose
    implementation libs.navigation.compose
    implementation libs.firebase.storage
    implementation libs.room.runtime
    kapt libs.room.compiler
    implementation libs.room.ktx
    implementation libs.splash.api
    implementation libs.realm.sync
    implementation libs.hilt.android
    kapt libs.hilt.compiler

    implementation libs.firebase.crashlytics
    implementation libs.firebase.analytics

    coreLibraryDesugaring libs.desugar.jdk

    implementation(project(":core:ui"))
    implementation(project(":core:util"))
    implementation(project(":data:mongo"))
    implementation(project(":feature:auth"))
    implementation(project(":feature:home"))
    implementation(project(":feature:write"))
}